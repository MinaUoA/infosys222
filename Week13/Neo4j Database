üóÑ Week 13
Introduction
@ Mina Cu and Johnny Chan

üìå Agenda
Why study Neo4j database?
What you would learn in Neo4j
Which systems would be most effective to use Neo4j
Applications

Why study database?
Neo4j is a graph database management system developed by Neo4j, Inc.Described by its developers as an ACID-compliant transactional database with 
native graph storage and processing. Neo4j is available in a non-open-source "community edition" licensed with a modification of the GNU General Public License, 
with online backup and high availability extensions licensed under a closed-source commercial license. Neo also licenses Neo4j with these extensions under
closed-source commercial terms.



DRAFT
Most software applications require a database

Data scientist uses database to handle large and distributed datasets

The demand for database to host our ever growing data and information would only go up as complexity increases

What you would learn
By the end of the course, you would have gained a solid background in database design and implementation. Specifically:

use data modelling to define and analyse data requirements
design a database in entity-relationship (ER) model and translate that to the relational model
Utilise theoretical technique like normalisation to improve database design and implementation
program basic to complex queries in SQL
understand the fundamentals of a relational database management system (DBMS) and its limitation
recognise database technologies beyond relational DBMS
Overview of the course
What is a database?

What is a DBMS?

What is a relational database?

How to design a relational database?

How to implement and use a relational database?

What is a database?
According to the Oxford Dictionary:

A structured set of data held in a computer, especially one that is accessible in various ways

ü§î How is a database different from a file system?

It is a collection of information that exists over a long period of time; the term database refers to a collection of data that is managed by a database management system (DBMS)

What is a DBMS?
It is a system for providing efficient, convenient, and safe storage of and multi-user access to (possibly massive) amounts of persistent data

ü§î Think of five examples when each of the bolded words applies

The DBMS evolution: hierarchical ‚Üí network ‚Üí relational ‚Üí object-oriented ‚Üí object-relational

What is a relational database?
All major general purpose DBMSs are based on the so-called relational data model. It means that all data are stored in a number of named tables (with named columns), such as the following table Account:
accNo	balance	type
11111	1234.50	saving
22222	7654.32	check
99999	-8888.00	loan
For historical, mathematical reasons such table is referred to as a relation. This course focuses solely on relational database and relational DBMS
How to design a relational database?
It is often far from obvious to decide how to store data from an application as relations. A considerable part of the course will deal with a methodology for good relational database design

ü§î Suggest how to represent the following types of data as one or more relations: 1) a contact list, 2) a shopping cart

ü§î Can you avoid (or reduce) duplication of data?

Database design methodology
We will cover the dominant design methodology for relational database, which consists of three steps:

Identify all relevant entities and relationships, and use an ER model to describe them
Convert the ER model to a number of relations
Eliminate (or reduce) redundancy by splitting up relations. This process is known as normalisation
Data modelling can also be differentiated among three stages:

conceptual ‚Üí logical ‚Üí physical
How to implement and use a relational database?
The success of relational database is largely due to the existence of powerful programming language for writing database queries

The most important of such language is structured query language (SQL):

convenience: queries can be written with little effort
efficiency: even for large datasets, a good DBMS can answer queries written in SQL very quickly
SQL
accNo	balance	type
11111	1234.50	saving
22222	7654.32	check
99999	-8888.00	loan
Consider the relation Account, the SQL code to get the balance from accNo 22222:
SELECT balance
FROM Account
WHERE accNo = 22222;
SQL: example
SELECT accNo, balance
FROM Account
WHERE type = 'loan'
AND balance < -10000;
SELECT *
FROM Account
WHERE accNo > balance;
üì¢ * is the shorthand for all columns/attributes

SQL: more example
accNo	name	address
11111	Dexter Morgan	666 Miami Road
22222	Steven Roger	222 Patriot Street
22222	Peggy Carter	999 Marvel Avenue
99999	John Reese	314 Machine Place
Suppose we have a related relation Holder, the SQL code to get the names of holders with check accounts:
SELECT name
FROM Account, Holder
WHERE Account.accNo = Holder.accNo
AND Account.type = 'check';
SQL: SELECT-FROM-WHERE
SELECT column1, column2, ...
FROM relation1
WHERE <conditions>;
SELECT column1, column2, ...
FROM relation1, relation2, ...
WHERE <join conditions>
AND <conditions>;
SQL: Quiz
Consider the relation Account again

Write a SQL statement that lists all accounts (with accNo and type) that have a positive balance

SELECT ...
FROM ...
WHERE ...
SQL: Syntax and semantics
As demonstrated, SQL statement resembles asking question in English. Quite often, the effect of an SQL statement can be intuitively understood

During the course you will learn how to compose much more complex statement in SQL. To do that you need a precise understanding of SQL‚Äôs:

Syntax: The way SQL statement could be written
Semantics: The meaning of a SQL statement
SQL: More aspects
SQL is based on a mathematical formalism called relational algebra

In addition to queries, SQL can be used to express many types of database operations:

Define new relations
Perform changes to data (e.g. insert, update and delete)
Set up constraints and triggers
Manage users, permissions, etc
Control transactions in a multi-user environment
Other topics in the course
Besides from data modelling and SQL, this course also covers:

Database efficiency

Transaction management

Concurrency management

Data warehouse (OLAP)

üóí Summary
By now you should:

know what this course is about

know how you could do well in this course

know a little about some key concepts: database, DBMS, relation, SQL; and know how they fit into the course

understand SELECT-FROM-WHERE of SQL

üìö Reading
Essential

The Worlds of Database Systems (p1-9)

Introduction from SQL for Web Nerds

Further

Database from Wikipedia
üóì Schedule
Week	Lecture
01	Introduction ‚úì
02	Relational model
03	ER modelling
04	Data modelling
05	Data modelling
06	Normalisation
07	SQL
08	SQL
09	SQL
10	DBMS fundamentals
11	Data warehouse
12	Review
üåè THE END
